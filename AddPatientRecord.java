/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.opencsv.CSVWriter;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import javax.swing.*;
import java.awt.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Objects;

/**
 * @author adm
 */
public class AddPatientRecord extends javax.swing.JFrame {

    /**
     * Creates new form addPatient
     */
    private static List<Doctor> allDoctors;

    public AddPatientRecord(List<Doctor> allDoctors) {
        this.allDoctors = allDoctors;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        idLabel = new JLabel();
        nameLabel = new JLabel();
        phoneNumberLabel = new JLabel();
        addressLabel = new JLabel();
        ageLabel = new JLabel();
        genderLabel = new JLabel();
        historyLabel = new JLabel();
        toDepartmentLabel = new JLabel();
        logoLabel = new JLabel();

        idTextField = new JTextField();
        nameTextField = new JTextField();
        phoneNumberTextField = new JTextField();
        ageTextField = new JTextField();
        addressTextField = new JTextField();
        historyTextField = new JTextField();

        genderBox = new JComboBox<>();
        departmentBox = new JComboBox<>();

        saveButton = new JButton();
        exitButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        setLocation(new Point(250, 150));
        setPreferredSize(new Dimension(1000, 600));
        getContentPane().setLayout(new AbsoluteLayout());

        idLabel.setBackground(new Color(0, 255, 0));
        idLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        idLabel.setText("ID:");
        getContentPane().add(idLabel, new AbsoluteConstraints(190, 60, 74, 24));

        nameLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        nameLabel.setText("Họ và tên: ");
        getContentPane().add(nameLabel, new AbsoluteConstraints(190, 100, -1, 25));

        phoneNumberLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        phoneNumberLabel.setText("Số điện thoại: ");
        getContentPane().add(phoneNumberLabel, new AbsoluteConstraints(190, 140, 113, 30));

        addressLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        addressLabel.setText("Địa chỉ: ");
        getContentPane().add(addressLabel, new AbsoluteConstraints(190, 280, 113, 24));

        ageLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        ageLabel.setText("Tuổi:");
        getContentPane().add(ageLabel, new AbsoluteConstraints(190, 190, 113, 26));

        genderLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        genderLabel.setText("Giới tính:");
        getContentPane().add(genderLabel, new AbsoluteConstraints(190, 230, 113, 25));

        idTextField.addActionListener(this::jTextField1ActionPerformed);
        getContentPane().add(idTextField, new AbsoluteConstraints(400, 60, 381, 24));

        nameTextField.addActionListener(this::jTextField2ActionPerformed);
        getContentPane().add(nameTextField, new AbsoluteConstraints(400, 100, 381, 25));
        getContentPane().add(phoneNumberTextField, new AbsoluteConstraints(400, 140, 381, 30));
        getContentPane().add(ageTextField, new AbsoluteConstraints(400, 190, 381, 26));
        getContentPane().add(addressTextField, new AbsoluteConstraints(400, 280, 381, 24));

        genderBox.setModel(new DefaultComboBoxModel<>(new String[]{"Male", "Female"}));
        getContentPane().add(genderBox, new AbsoluteConstraints(400, 230, 381, 25));

        historyLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        historyLabel.setText("Tiền sử bệnh án:");
        getContentPane().add(historyLabel, new AbsoluteConstraints(190, 320, -1, 26));

        historyTextField.addActionListener(this::jTextField7ActionPerformed);
        getContentPane().add(historyTextField, new AbsoluteConstraints(400, 320, 381, 26));

        saveButton.setText("Save");
        saveButton.addActionListener(this::saveButtonActionPerformed);
        getContentPane().add(saveButton, new AbsoluteConstraints(80, 490, -1, -1));

        exitButton.setText("Thoát");
        exitButton.addActionListener(this::exitButtonActionPerformed);
        getContentPane().add(exitButton, new AbsoluteConstraints(850, 490, -1, -1));

        toDepartmentLabel.setFont(new Font("Segoe UI", Font.BOLD, 14)); // NOI18N
        toDepartmentLabel.setText("Chuyển đến:");
        getContentPane().add(toDepartmentLabel, new AbsoluteConstraints(190, 360, 113, 32));

        departmentBox.setModel(new DefaultComboBoxModel<>(new String[]{"Khoa Nội", "Khoa Ngoại", "Khoa Phụ sản", "Khoa Tai-Mũi-Họng", "Khoa Hồi sức tích cực", "Khoa Răng-Hàm-Mặt", "Khoa Ung bướu", "Khoa Cấp cứu", "Khoa Xương khớp"}));
        getContentPane().add(departmentBox, new AbsoluteConstraints(400, 360, 381, 32));

        logoLabel.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/Interface-image/logo.jpg")))); // NOI18N
        logoLabel.setText("jLabel10");
        getContentPane().add(logoLabel, new AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (isValidInput()) {
            String id = idTextField.getText();
            idTextField.setText("");
            String name = nameTextField.getText();
            nameTextField.setText("");
            String phone = phoneNumberTextField.getText();
            phoneNumberTextField.setText("");
            String age = ageTextField.getText();
            ageTextField.setText("");
            String address = addressTextField.getText();
            addressTextField.setText("");
            String history = historyTextField.getText();
            historyTextField.setText("");
            String gender = String.valueOf(genderBox.getSelectedItem());
            String department = String.valueOf(departmentBox.getSelectedItem());

            String[] patient = new String[]{id, name, phone, age, gender, address, history, department};
            writeToCSV(patient);
            JOptionPane.showMessageDialog(this, "Thêm bệnh nhân thành công.");
//            Doctor selectedDoctor = findDoctorByDepartment(department);
//            if (selectedDoctor != null) {
//                selectedDoctor.addPatientToQueue(patient);
//            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid input.");
        }
    }

    private boolean isValidInput() {
        try {
            int id = Integer.parseInt(idTextField.getText());
            int age = Integer.parseInt(ageTextField.getText());
            if (id <= 0 || age <= 0) {
                JOptionPane.showMessageDialog(this, "ID và Tuổi phải là số nguyên dương.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            String name = nameTextField.getText();
            if (!name.matches("^[a-zA-Z\\s]+$")) {
                JOptionPane.showMessageDialog(this, "Tên phải là chuỗi hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            String gender = String.valueOf(genderBox.getSelectedItem());
            String address = addressTextField.getText();
            String phone = phoneNumberTextField.getText();
            String history = historyTextField.getText();

            if (gender.isEmpty() || address.isEmpty() || phone.isEmpty() || history.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin của bệnh nhân.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (!phone.matches("^\\d+$")) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID và Tuổi phải là số nguyên.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

//    private Doctor findDoctorByDepartment(String department) {
//        for (Doctor doctor : allDoctors) {
//            if (doctor.getDepartment().equals(department)) {
//                return doctor;
//            }
//        }
//        return null;
//    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddPatientRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AddPatientRecord(allDoctors).setVisible(true));
    }

    public void writeToCSV(String[] data) {
        String csv = "waiting.csv";
        try {
            CSVWriter writer = new CSVWriter(new FileWriter(csv, true));
            writer.writeNext(data);
            writer.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    // Variables declaration
    private JButton exitButton;
    private JButton saveButton;
    private JComboBox<String> genderBox;
    private JComboBox<String> departmentBox;
    private JLabel idLabel;
    private JLabel logoLabel;
    private JLabel nameLabel;
    private JLabel phoneNumberLabel;
    private JLabel addressLabel;
    private JLabel ageLabel;
    private JLabel genderLabel;
    private JLabel historyLabel;
    private JLabel toDepartmentLabel;
    private JTextField idTextField;
    private JTextField nameTextField;
    private JTextField phoneNumberTextField;
    private JTextField ageTextField;
    private JTextField addressTextField;
    private JTextField historyTextField;
}
