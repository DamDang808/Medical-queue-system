/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 * @author ADMIN
 */
public class DoctorInterface extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    // Variables declaration
    private JPanel doctor;
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton4;
    private JButton jButton5;
    private JButton jButton6;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JTextArea jTextArea1;
    private Patient patient;
    private Queue<Patient> patientsWaiting = new LinkedList<>();
    private List<Patient> diagnosedPatients = new LinkedList<>();

    public DoctorInterface() {
        this.setTitle("Doctor");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jPanel1 = new JPanel();
        jPanel2 = new JPanel();
        jPanel3 = new JPanel();
        doctor = new JPanel();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jButton5 = new JButton();
        jButton6 = new JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton1.setIcon(changeSizeImage("Interface-image/icons8-test-results-100.png")); // NOI18N
        jButton1.setText("Danh sách bệnh nhân đang chờ khám");

        jButton1.addActionListener(this::jButton1ActionPerformed);

        jButton2.setIcon(changeSizeImage("Interface-image/img1.icons8.png")); // NOI18N
        jButton2.setText("Chấn đoán cho bệnh nhân đã khám xong");

        jButton2.addItemListener(this::jButton2ItemStateChanged);
        jButton2.addActionListener(this::jButton2ActionPerformed);

        jButton3.setIcon(changeSizeImage("Interface-image/icons8-prescription-64.png")); // NOI18N
        jButton3.setText("Kê đơn thuốc cho bệnh nhân");

        jButton3.addActionListener(this::jButton3ActionPerformed);

        jButton4.setIcon(changeSizeImage("Interface-image/OIP.jpg")); // NOI18N
        jButton4.setText("Chuyển bệnh nhân đi xét nghiệm hoặc chuyển qua chuyên khoa khác");

        jButton4.addActionListener(this::jButton4ActionPerformed);

        jButton5.setIcon(changeSizeImage("Interface-image/icons8-todo-list-48.png")); // NOI18N
        jButton5.setText("Danh sách bệnh nhân đã khám xong");

        jButton5.addActionListener(this::jButton5ActionPerformed);

        jButton6.setIcon(changeSizeImage("Interface-image/icons8-exit-100.png")); // NOI18N
        jButton6.setText("Thoát");
        jButton6.addActionListener(this::jButton6ActionPerformed);

        GroupLayout DoctorLayout = new GroupLayout(doctor);
        doctor.setLayout(DoctorLayout);
        DoctorLayout.setHorizontalGroup(
                DoctorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(DoctorLayout.createSequentialGroup()
                                .addGroup(DoctorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(DoctorLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(DoctorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton1)
                                                        .addComponent(jButton2)
                                                        .addComponent(jButton6)))
                                        .addGroup(DoctorLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButton3))
                                        .addGroup(DoctorLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButton5))
                                        .addGroup(DoctorLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButton4)))
                                .addGap(475, 475, 475))
        );
        DoctorLayout.setVerticalGroup(
                DoctorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(DoctorLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jButton2)
                                .addGap(56, 56, 56)
                                .addComponent(jButton4)
                                .addGap(47, 47, 47)
                                .addComponent(jButton5)
                                .addGap(41, 41, 41)
                                .addComponent(jButton3)
                                .addGap(53, 53, 53)
                                .addComponent(jButton6, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(doctor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(doctor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        doctor.getAccessibleContext().setAccessibleDescription("");

        pack();
    }

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        showPatientsWaitingTable();
    }

    private void jButton2ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        Patient patientNow = patientsWaiting.peek();
        if (patientNow == null) {
            JOptionPane.showMessageDialog(this, "Không có bệnh nhân nào đang chờ khám!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String diagnosis = JOptionPane.showInputDialog(this, "Nhập chẩn đoán cho bệnh nhân đã khám xong:");
        if (diagnosis != null && !diagnosis.isEmpty()) {
            patientNow.setDoctorsDiagnosis(diagnosis);
            diagnosedPatients.add(patientNow);
            patientsWaiting.poll();
            deleteFirstRowInCSV("waiting.csv");
            JOptionPane.showMessageDialog(this, "Chẩn đoán của bệnh nhân: " + diagnosis,
                    "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Chưa nhập chẩn đoán!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton3ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        prescribeMedicineToPatient();
    }


    private void jButton4ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        transferPatientToAnotherDepartment();
    }

    private void jButton5ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        showDiagnosedPatientsTable();
    }

    private void jButton6ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn thoát?",
                "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            this.setVisible(false);
        }
    }

    private void jButton2ItemStateChanged(ItemEvent evt) {
        // TODO add your handling code here:
    }

    private void showPatientsWaitingTable() {
        String[] columnNames = {"Số thứ tự", "Họ tên bệnh nhân", "Số điện thoại", "Tuổi", "Giới tính", "Địa chỉ", "Tình trạng bệnh", "Ngày khám"};
        JTable table = new JTable(0, columnNames.length);
        DefaultTableModel model = new DefaultTableModel(new Object[][]{}, columnNames);
        table.setAutoCreateRowSorter(true);
        table.setModel(model);

        try {
            Reader reader = Files.newBufferedReader(Paths.get("waiting.csv"));

            // create csv reader
            CSVReader csvReader = new CSVReader(reader);

            // read all records at once
            List<String[]> records = csvReader.readAll();
            LocalDate date = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            for (String[] data : records) {
                String[] row = new String[]{data[0], data[1], data[2], data[3], data[4], data[5], data[6], date.format(formatter)};
                Patient patient = new Patient(data[0], data[1], data[2], data[3], data[4], data[5], data[6]);
                model.addRow(row);
                patientsWaiting.add(patient);
            }
            reader.close();
        } catch (IOException | CsvException e) {
            throw new RuntimeException(e);
        }

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(1200, 600));
        JTextField searchField = new JTextField(20);
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }
        });

        JPanel panel = new JPanel();
        panel.add(new JLabel("Tìm kiếm: "));
        panel.add(searchField);
        panel.add(scrollPane);

        JOptionPane.showMessageDialog(this, panel, "Danh sách bệnh nhân đang chờ khám", JOptionPane.PLAIN_MESSAGE);
    }

    private void showDiagnosedPatientsTable() {
        String[] columnNames = {"Số thứ tự", "Họ tên", "Tuổi", "Giới tính", "Chẩn đoán"};
        JTable table = new JTable(0, columnNames.length);
        DefaultTableModel model = new DefaultTableModel(new Object[][]{}, columnNames);
        table.setAutoCreateRowSorter(true);
        table.setModel(model);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(1200, 600));

        for (Patient patient : diagnosedPatients) {
            String[] row = new String[]{patient.getID(), patient.getName(), patient.getAge(), patient.getGender(), patient.getDoctorsDiagnosis()};
            model.addRow(row);
        }

        JTextField searchField = new JTextField(20);
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search(searchField.getText(), table);
            }
        });

        JPanel panel = new JPanel();
        panel.add(new JLabel("Tìm kiếm: "));
        panel.add(searchField);
        panel.add(scrollPane);

        JOptionPane.showMessageDialog(this, panel, "Danh sách bệnh nhân đã khám xong", JOptionPane.PLAIN_MESSAGE);
    }

    private void prescribeMedicineToPatient() {
        JComboBox<String> patientsBox = new JComboBox<>();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(new String[]{});
        patientsBox.setModel(model);
        boolean isPrescribed = true;

        for (Patient patient : diagnosedPatients) {
            // Kiểm tra xem đã kê đơn thuốc cho tất cả bệnh nhân đã khám hay chưa
            // Nếu chưa kê đơn thuốc cho bệnh nhân nào thì hiển thị danh sách bệnh nhân đã khám để người dùng chọn bệnh nhân muốn kê đơn thuốc
            if (patient.getMedicine() == null) {
                isPrescribed = false;
                model.addElement(patient.getName());
            }
        }

        if (isPrescribed) {
            JOptionPane.showMessageDialog(this, "Không còn bệnh nhân nào cần kê đơn thuốc.",
                    "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Người dùng đã chọn một bệnh nhân đã khám, tiếp tục nhập đơn thuốc
        String patientName = String.valueOf(patientsBox.getSelectedItem());
        String prescription = JOptionPane.showInputDialog(this, "Nhập đơn thuốc cho " + patientName + ":");
        if (prescription != null && !prescription.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Đã nhập đơn thuốc cho " + patientName + ": " + prescription, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            // Lưu thông tin đơn thuốc vào cơ sở dữ liệu hoặc xử lý theo ý bạn
            diagnosedPatients.forEach(patient -> {
                if (patient.getName().equals(patientName)) {
                    patient.setMedicine(prescription);
                }
            });
        } else {
            JOptionPane.showMessageDialog(this, "Chưa nhập đơn thuốc!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void transferPatientToAnotherDepartment() {
        // Ví dụ danh sách bệnh nhân đã khám
        String[] diagnosedPatients = {"Bệnh nhân A", "Bệnh nhân B", "Bệnh nhân C"}; // Thay thế bằng danh sách bệnh nhân đã khám thực tế

        boolean isTransferred = false;

        // Kiểm tra xem còn bệnh nhân đã khám nào chưa được chuyển sang khoa khác
        for (String patient : diagnosedPatients) {
            // Xử lý logic kiểm tra xem bệnh nhân đã được chuyển khoa khác hay chưa, ví dụ sử dụng một danh sách bệnh nhân đã chuyển khoa khác
            // Nếu bệnh nhân chưa được chuyển khoa khác
            if (!isTransferred) {
                // Hiển thị danh sách bệnh nhân đã khám để người dùng chọn bệnh nhân muốn chuyển
                String selectedDiagnosedPatient = (String) JOptionPane.showInputDialog(
                        this, "Chọn bệnh nhân đã khám:",
                        "Danh sách bệnh nhân đã khám",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        diagnosedPatients,
                        diagnosedPatients[0]
                );

                if (selectedDiagnosedPatient != null) {
                    // Người dùng đã chọn một bệnh nhân đã khám, tiếp tục chuyển bệnh nhân sang khoa khác
                    String department = JOptionPane.showInputDialog(this, "Nhập tên khoa muốn chuyển bệnh nhân đến:");
                    if (department != null && !department.isEmpty()) {
                        // Xử lý chuyển bệnh nhân sang khoa khác
                        // sendToOtherDepartment(department, selectedDiagnosedPatient); // Phương thức này chuyển bệnh nhân sang khoa khác
                        JOptionPane.showMessageDialog(this, "Đã chuyển bệnh nhân " + selectedDiagnosedPatient + " đến khoa " + department, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                        isTransferred = true; // Đã chuyển bệnh nhân thành công
                    } else {
                        JOptionPane.showMessageDialog(this, "Chưa nhập tên khoa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    // Người dùng không chọn bệnh nhân đã khám hoặc ấn X
                    JOptionPane.showMessageDialog(this, "Thoát khỏi việc chuyển bệnh nhân.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    return; // Thoát ra khỏi phương thức khi người dùng không chọn bệnh nhân hoặc ấn X
                }
            }
        }

        // Kiểm tra xem đã chuyển bệnh nhân cho tất cả bệnh nhân đã khám hay chưa
        if (!isTransferred) {
            JOptionPane.showMessageDialog(this, "Không còn bệnh nhân nào cần chuyển khoa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void search(String text, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
    }

    private void deleteFirstRowInCSV(String fileLocation) {
        List<String[]> allElements;
        try {
            CSVReader reader2 = new CSVReader(new FileReader(fileLocation));
            allElements = reader2.readAll();
            if (allElements.isEmpty()) {
                return;
            }
            allElements.remove(0);
            FileWriter sw = new FileWriter(fileLocation);
            CSVWriter writer = new CSVWriter(sw);
            writer.writeAll(allElements);
            writer.close();
        } catch (IOException | CsvException e) {
            throw new RuntimeException(e);
        }

    }

    private ImageIcon changeSizeImage(String fileLocation) {
        ImageIcon imageIcon = new ImageIcon(fileLocation); // load the image to a imageIcon
        Image image = imageIcon.getImage(); // transform it
        Image newimg = image.getScaledInstance(70, 70,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
        imageIcon = new ImageIcon(newimg);  // transform it back
        return imageIcon;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            Logger.getLogger(DoctorInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(() -> new DoctorInterface().setVisible(true));
    }
}
